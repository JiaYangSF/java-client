# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

pool:
  vmImage: 'macOS 10.13'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '8.x'

- bash:
    echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
    echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n xamarin_android_emulator -k 'system-images;android-27;google_apis;x86' --force
    echo $ANDROID_HOME/emulator/emulator -list-avds
    echo "Starting emulator"
    nohup $ANDROID_HOME/emulator/emulator -avd xamarin_android_emulator -no-snapshot > /dev/null 2>&1 &
    $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
    $ANDROID_HOME/platform-tools/adb devices
    echo "Emulator started"

- script: |
    echo Configuring Environment
    npm config delete prefix
    npm config set prefix $NVM_DIR/versions/node/v8.12.0
    npm install -g appium@beta
    appium --version
    node --version
    java -version
    which node
    npm root -g

#- task: Gradle@2
#  inputs:
#    gradleWrapperFile: 'gradlew'
#    gradleOptions: '-Xmx3072m'
#    javaHomeOption: 'JDKVersion'
#    jdkVersionOption: '1.8'
#    jdkArchitectureOption: 'x64'
#    publishJUnitResults: true
#    tasks: 'build'
#    options: 'xcuiTest -x test -x signArchives'
